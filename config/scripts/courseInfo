#!/usr/bin/env bash

echoHelpMessage () {
  echo "courseInfo - get information about the currently active course"
  echo
  echo "Using both the info.json file in each course directory as well as the"
  echo "file structure of the quarter directory, courseInfo can be used"
  echo "to get information such as the title or directory or the current course"
  echo
  echo "Usage: courseInfo [DIRECTORY] [options]"
  echo "  Specifying the directory of the course is optional, and if no directory"
  echo "  is specified, the program will work with the current course information."
  echo "  Specified directories should be the direct parent of the info.json file."
  echo
  echo "  Each option will output the corresponding informationa about the"
  echo "  current course. Passing multiple options will output each value in"
  echo "  consecutive lines in order. No native formatting is supported."
  echo
  echo "Available Options:"
  echo "  -t, --title         Title of the course. From info.json"
  echo "  -s, --short         Short title of the course. From info.json"
  echo "  -c, --code          Four letter code of the course. From info.json"
  echo "  -n, --number        Number code of the course. From info.json"
  echo "  -r, --start         Start time in 24 hour format. From info.json"
  echo "  -e, --end           End time in 24 hour format. From info.json"
  echo "  -d, --days          Days of the week the course meets. Formatted as a"
  echo "                      string of three letter days, eg. \"Mon Wed Fri\"."
  echo "                      From info.json"
  echo "  -x, --has-lab       Returns true if a lab section exists, and false"
  echo "                      otherwise. From info.json"
  echo "  -R, --lab-start     Start time of lab in 24 hour format. Returns -1 if"
  echo "                      no lab section exists. From info.json"
  echo "  -R, --lab-start     End time of lab in 24 hour format. Returns -1 if no"
  echo "                      lab section exists. From info.json"
  echo "  -D, --lab-days      Days of the week the lab meets. Formatted as a string"
  echo "                      of three letter days, eg. \"Mon Wed Fri\". Returns -1"
  echo "                      no lab section exists. From info.json"
  echo "  -p, --path          Absolute path to the course. From file structure"
  echo "  -f, --last-figure   Absolute path to the most recent figure file in the"
  echo "                      course. Figure files are any file in the notes/figures/"
  echo "                      subdirectory named in the \"fig_XXX_?.tex\" format."
  echo "  -F, --next-figure   Absolute path to the next figure file in the course."
  echo "                      Note that this file does not exist, and is only the"
  echo "                      name of what would be the next figure file."
  echo "                      subdirectory named in the \"lec_XXX.tex\" format."
  echo "  -l, --last-lecture  Absolute path to the most recent lecture file in the"
  echo "                      course. Lecture files are any file in the notes/"
  echo "                      subdirectory named in the \"lec_XXX.tex\" format."
  echo "  -L, --next-lecture  Absolute path to the next lecture file in the course."
  echo "                      Note that this file does not exist, and is only the"
  echo "                      name of what would be the next lecture file."
  echo "                      subdirectory named in the \"lec_XXX.tex\" format."
  echo "  -h, --help          Displays this help message"
}

if [[ -d "$1" ]]; then
  if [[ $(find $1 -maxdepth 1 -mindepth 1 -type f -name info.json | wc -l) = 1 ]]; then
    coursePath="$1"
    shift
  else
    echo "Invalid directory: Specified directory must be direct parent to info.json file"
    exit 1
  fi
else
  coursePath="$(readlink -n $CURRCOURSE)"
fi

VALID_ARGS=$(getopt -o tscnredxREDpfFlLh --long title,short,code,number,start,end,days,has-lab,lab-start,lab-end,lab-days,path,last-figure,next-figure,last-lecture,next-lecture,help -- "$@")
if [[ $? -ne 0 ]]; then
  exit 1;
fi

eval set -- "$VALID_ARGS"
while [ : ]; do
  case "$1" in
    -t | --title)
      echo $(cat "$coursePath/info.json" | jq -r .name.title)
      shift
      ;;

    -s | --short)
      echo $(cat "$coursePath/info.json" | jq -r .name.short)
      shift
      ;;

    -c | --code)
      echo $(cat "$coursePath/info.json" | jq -r .name.code)
      shift
      ;;

    -n | --number)
      echo $(cat "$coursePath/info.json" | jq -r .name.number)
      shift
      ;;

    -r | --start)
      echo $(cat "$coursePath/info.json" | jq -r .schedule.start)
      shift
      ;;

    -e | --end)
      echo $(cat "$coursePath/info.json" | jq -r .schedule.end)
      shift
      ;;

    -d | --days)
      echo $(cat "$coursePath/info.json" | jq -r .schedule.days)
      shift
      ;;

    -x | --has-lab)
      echo $(cat "$coursePath/info.json" | jq -r .hasLab)
      shift
      ;;

    -R | --lab-start)
      if [[ $(cat "$coursePath/info.json" | jq -r .hasLab) = true ]]; then
        echo $(cat "$coursePath/info.json" | jq -r .schedule.labStart)
      else
        echo -1
      fi
      shift
      ;;

    -E | --lab-end)
      if [[ $(cat "$coursePath/info.json" | jq -r .hasLab) = true ]]; then
        echo $(cat "$coursePath/info.json" | jq -r .schedule.labEnd)
      else
        echo -1
      fi
      shift
      ;;

    -D | --lab-days)
      if [[ $(cat "$coursePath/info.json" | jq -r .hasLab) = true ]]; then
        echo $(cat "$coursePath/info.json" | jq -r .schedule.labDays)
      else
        echo -1
      fi
      shift
      ;;

    -p | --path)
      echo "$coursePath"
      shift
      ;;

    -f | --last-figure)
      mapfile -t figures < <(find $coursePath/notes -regextype posix-extended -regex '.*fig_[0-9]{3}\.tex.*' | sort)
      if [[ ${#figures[@]} -gt 0 ]]; then
        echo "${figures[${#figures[@]} - 1]}"
      else
        echo -1
      fi
      shift
      ;;

    -F | --next-figure)
      mapfile -t figures < <(find $coursePath/notes -regextype posix-extended -regex '.*fig_[0-9]{3}\.tex.*' | sort)
      if [[ ${#figures[@]} -gt 0 ]]; then
        lastNumber="$(echo ${figures[${#figures[@]} - 1]} | sed 's/.*\/fig_\([0-9]\{3\}\).tex/\1/' | sed 's/[0]*\([1-9]*\)/\1/')"
        nextNumber=$(printf "%03d" $(($lastNumber + 1)))
        echo "$(readlink -n $CURRCOURSE)/notes/figures/fig_$nextNumber.tex"
      else
        echo "$(readlink -n $CURRCOURSE)/notes/figures/fig_001.tex"
      fi
      shift
      ;;

    -l | --last-lecture)
      mapfile -t lectures < <(find $coursePath/notes -regextype posix-extended -regex '.*lec_[0-9]{3}\.tex.*' | sort)
      if [[ ${#lectures[@]} -gt 0 ]]; then
        echo "${lectures[${#lectures[@]} - 1]}"
      else
        echo -1
      fi
      shift
      ;;

    -L | --next-lecture)
      mapfile -t lectures < <(find $coursePath/notes -regextype posix-extended -regex '.*lec_[0-9]{3}\.tex.*' | sort)
      if [[ ${#lectures[@]} -gt 0 ]]; then
        lastNumber="$(echo ${lectures[${#lectures[@]} - 1]} | sed 's/.*\/lec_\([0-9]\{3\}\).tex/\1/' | sed 's/[0]*\([1-9]*\)/\1/')"
        nextNumber=$(printf "%03d" $(($lastNumber + 1)))
        echo "$(readlink -n $CURRCOURSE)/notes/lec_$nextNumber.tex"
      else
        echo "$(readlink -n $CURRCOURSE)/notes/lec_001.tex"
      fi
      shift
      ;;

    -h | --help)
      echoHelpMessage
      shift
      ;;

    --) shift;
      break 
      ;;
  esac
done
